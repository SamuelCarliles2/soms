// export everything
export enum FooglarType {
    ART = "ART",
    CAT = "CAT",
    JEWEL = "JEWEL"
}

export class Fooglar {
    // THIS STUFF WORKS

    // non-optional static const fields will be included in serialized messages,
    // and so are good for things like tagging messages with schema versions
    static readonly MESSAGE_SCHEMA_VERSION = "1.0.0";

    // optional static const fields will be excluded from serialized messages,
    // and so are good for values you want in the language bindings
    // but not in the serialized messages
    static readonly DEFAULT_CATCH? = false;
    static readonly DEFAULT_FOOGLAR_TYPE? = FooglarType.CAT;

    // THIS WORKS, BUT IS CLUNKY
    // if you want doubles picked up as doubles,
    // you had better declare the type explicitly
    // and put a dot in the literal value
    static readonly DISCOUNT_RATE?: double = 0.10;

    // THIS WORKS IF YOU DON'T DO THE THING THAT BREAKS IT
    //
    // TODO: FIX THIS
    // for now int64 is really just TS number,
    // which is just JS number,
    // which is 64-bit double,
    // so don't run off the end of it until we fix this.
    // otherwise you should be ok
    static readonly MIN_HAUL?: int64 = 100000;

    // THIS STUFF DOESN'T WORK
    //
    // for now static const field values must be defined and not null,
    // so don't do this
    //
    // static readonly NOPE: string = null;
    //
    //
    // for now we're going to stick with the following static const value types
    // boolean | int64 | double | string | enum values,
    // so don't do either of these
    //
    // static readonly DEFAULT_ARRAY: string[] = ["not", "today", "sorry"];
    //
    // static readonly DEFAULT_DISGUISE : Disguise
    //     = new BlackBodySockWithPurpleCapeAndGiantPlumeHat();

    // THIS ALL WORKS
    name: string;
    yearOfBirth: int64;
    fooglarType: FooglarType;
    heightInKm: double;
    aliases: string[];
    aliasAliases: string[][];
    threedeeDouble: double[][][];
    intsAPoppin: int64[][][];
}


export class Case {
    static readonly MESSAGE_SCHEMA_VERSION = "1.0.0";

    id: int64;
    description: string;

    // WORKS
    suspects: Fooglar[];
}


export class Footective {
    static readonly MESSAGE_SCHEMA_VERSION = "1.0.0";

    name: string;
    alcoholic?: boolean;
    looseCannon?: boolean;

    // WORKS
    cases: Case[];

    // recursive message structures work
    directReports: Footective[];

    // if you uncomment the following,
    // compilation will break due to unresolved type
    // badType: Bartective[];
}
